#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELOW=$(tput setaf 3)
BLUE=$(tput setaf 14)
NC=$(tput sgr 0)

function info() { [ "$DEBUG" = false ] && echo "${BLUE}${FUNCNAME[1]} ${@}${NC}" || echo "${BLUE}${@} ${FUNCNAME[1]} line:${BASH_LINENO[0]}${NC}"; }
function warn() { [ "$DEBUG" = false ] && echo "${YELOW}${FUNCNAME[1]} ${@}${NC}" || echo "${YELOW}${@} ${FUNCNAME[1]} line:${BASH_LINENO[0]}${NC}"; }
function error() { [ "$DEBUG" = false ] && echo "${RED}${FUNCNAME[1]} ${@}${NC}" || echo "${RED}${@} ${FUNCNAME[1]} line:${BASH_LINENO[0]}${NC}"; }
function success() { [ "$DEBUG" = false ] && echo "${GREEN}${FUNCNAME[1]} ${@}${NC}" || echo "${GREEN}${@} ${FUNCNAME[1]} line:${BASH_LINENO[0]}${NC}"; }

function check_command() {
  if [[ $? -ne 0 ]]; then
    error "Error execution ${FUNCNAME[1]} line:${BASH_LINENO[0]} command: ${@}"
    exit 1
  fi
}

function raz () {
  
  info "$FUNCNAME" Start
  docker compose down
  [ -d "$RACINE"/moodle ] && sudo rm -r "$RACINE"/moodle
  [ -d "$RACINE"/dbdata ] && sudo rm -r "$RACINE"/dbdata
  if [  -d "$RACINE"/moodledata ]; then
   sudo rm -r "$RACINE"/moodledata
  fi 
  mkdir "$RACINE"/moodledata
  sudo chown www-data:www-data "$RACINE"/moodledata
  
  [ -d "$RACINE"/cache ] && sudo rm -r "$RACINE"/cache
  info "$FUNCNAME"End

}
function update_moodle_volume () {  
# 1 PROJECT
# 2 ENV
# 3 RELEASE (OPTIONAL)
info "$FUNCNAME" Start
PROJECT="$1"
ENV_DEPLOY="$2"
RELEASE="$3"

  [ "$DEBUG" = true ] && info debug: "$MOODLE_SRC" "$PROJECT" "$ENV_DEPLOY" "$RELEASE"
  
  cd "$MOODLE_SRC" || exit
  git checkout "$PROJECT" --quiet || check_command git checkout "$RELEASE"
  if [ -z "$3" ]; then
    RELEASE=$(git tag -l | grep "$PROJECT" | sort -rn | head -n 1)
  fi
  
  info release: "$RELEASE"
  [ -z "$RELEASE" ] && error release not defined! && exit
  git checkout "$RELEASE" --quiet || check_command git checkout "$RELEASE"
  
  rsync -a --info=progress2 --exclude .git --delete "$MOODLE_SRC"/ "$TARGET"
  info "Update from $MOODLE_SRC / $RELEASE -> $TARGET"

  info "$FUNCNAME" End
}

function wait_docker () {  
  info "$FUNCNAME" Start  
  docker compose up -d
  # docker_moodle-app must be up
  while [ -z "$ret" ]; do
    ret=$(docker compose ps --status running | grep "$1")
    sleep 3
  done
}

function deploy () {

# 1 PROJECT
# 2 ENV
# 3 RELEASE (OPTIONAL)

  info "$FUNCNAME" Start
  
  PROJECT="$1"
  ENV_DEPLOY="$2" 
  #[  -z "$3" ] && RELEASE=current || RELEASE="$3"
  RELEASE="$3"

   wait_docker docker_moodle-app

  info docker_moodle-app up and running  

  docker exec -it docker_moodle-app  php admin/cli/maintenance.php --enable 
  update_moodle_volume "$PROJECT" "$ENV_DEPLOY" "$RELEASE"   
  docker exec -it docker_moodle-app  php admin/cli/upgrade.php
  docker exec -it docker_moodle-app  php admin/cli/maintenance.php --disable
  docker exec -it docker_moodle-app  php admin/cli/purge_caches.php

  info  "$FUNCNAME" End
  
}